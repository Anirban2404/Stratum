/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Nov 09 2016 20:13:45 GMT-0600 (CST).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'text!./Templates/jsonRead.py',
    'common/util/ejs',
    'text!./Templates/KMeansModel.py'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    jrt,
    ejs,
    kmn) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of KMeans_CodeGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin KMeans_CodeGenerator.
     * @constructor
     */
    var KMeans_CodeGenerator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
        this.pathToNode = {};
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    KMeans_CodeGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    KMeans_CodeGenerator.prototype = Object.create(PluginBase.prototype);
    KMeans_CodeGenerator.prototype.constructor = KMeans_CodeGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    KMeans_CodeGenerator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            artifact,
            dataModelStr,
            nodeObject;


       /* // Using the logger.
        self.logger.debug('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warn('This is a warning message.');
        self.logger.error('This is an error message.');

        // Using the coreAPI to make changes.

        nodeObject = self.activeNode;

        self.core.setAttribute(nodeObject, 'name', 'My new obj');
        self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});*/


        self.extractDataModel()
            .then(function (dataModel) {
                dataModelStr = JSON.stringify(dataModel, null, 4);
                self.dataModel = dataModel;
                self.logger.info('Extracted dataModel', dataModelStr);
                return self.blobClient.putFile('ML_kmeans.json', dataModelStr);
            })
            .then(function (jsonFileHash) {
                self.logger.info('ML_KMeans.json available with blobHash', jsonFileHash);
                // Add link from result to this file.
                self.result.addArtifact(jsonFileHash);

                // Create a complex artifact, with links to multiple files.
                artifact = self.blobClient.createArtifact('KMeans_simulator');

                return artifact.addFilesAsSoftLinks({
                    'ML_kmeans.json': dataModelStr,
                    'jsonRead.py': jrt,
                    'KMeansModel.py': kmn
                });
            })
            .then(function (/*hashes*/) {
                return artifact.save();
            })
            .then(function (simulatorHash) {
                self.result.addArtifact(simulatorHash);

                return self.save('Added simulator to model');
            })
            .then (function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                callback(err, self.result);
            });

        /*// This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.save('KMeans_CodeGenerator updated model.')
            .then(function () {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // Result success is false at invocation.
                callback(err, self.result);
            });*/

    };

    KMeans_CodeGenerator.prototype.extractDataModel = function(callback){
        var self =this;

        var dataModel =
        {
            MLModel: {
                name : '',
                dataPath: "",
                DataAcquisition: {

                },
                MLFramework: {
                    "algorithm": "",
                    "clusterSize" : "",
                    "trainingSize" : ""
                }
            }
        };

        //self.pathToNode={};


        dataModel.MLModel.name = self.core.getAttribute(self.activeNode, 'name');

        // In order to avoid multiple iterative asynchronous 'load' calls we pre-load all the nodes in the state-machine
        // and builds up a local hash-map from their paths to the node.
        return this.core.loadSubTree(self.activeNode)
            .then(function (nodes) {
                // All the nodes or objects
                var i,
                    j,
                    a,
                    childNode,
                    childName,
                    acq_node,
                    algo,
                    childrenPaths;

                for ( i = 0; i < nodes.length; i += 1){
                    self.pathToNode[self.core.getPath(nodes[i])] = nodes[i];
                    //self.logger.info(self.core.getAttribute(nodes[i], 'name'));
                }
                childrenPaths = self.core.getChildrenPaths(self.activeNode);

                for (i = 0; i < childrenPaths.length; i += 1) {
                    childNode = self.pathToNode[childrenPaths[i]];
                    // Log the name of the child (it's an attribute so we use getAttribute).
                    childName = self.core.getAttribute(childNode, 'name');
                    //self.logger.info('At childNode', childName);
                    if (self.isMetaTypeOf(childNode, self.META['Input']) === true) {
                        dataModel.MLModel.dataPath = self.core.getAttribute(childNode, 'path');
                    }

                    if (self.isMetaTypeOf(childNode, self.META['MLFramework']) === true) {
                        var algorithms = self.core.getChildrenPaths(childNode);
                        for (a = 0; a < algorithms.length; a += 1) {
                            algo = self.pathToNode[algorithms[a]];
                            var algoName = self.core.getAttribute(algo, 'name');
                            self.logger.info('Algorithms', algoName);
                            dataModel.MLModel.MLFramework.algorithm = self.core.getAttribute(algo, 'name');
                            if (self.isMetaTypeOf(algo, self.META['KMeans']) === true) {
                                dataModel.MLModel.MLFramework.clusterSize = self.core.getAttribute(algo, 'clusterSize');
                                dataModel.MLModel.MLFramework.trainingSize = self.core.getAttribute(algo, 'trainingSize');
                            }
                        }
                    }

                }
                return dataModel;
            })
            .nodeify(callback);
    };

    return KMeans_CodeGenerator;
});
